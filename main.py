import traceback
import os
from telegram.ext import Updater, MessageHandler, Filters, CommandHandler, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import infoDetails
import db_work
import trains
import modules_work_tools
from serveces.barcode_scanner_image import scan_barcode

modules_type_codes = {'w_t': '–°–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥', 'w_def': '–°–ª–æ–≤–æ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '3_w': '3 —Å–ª–æ–≤–∞', '4_w': '4 —Å–ª–æ–≤–∞',
                      'w_t_e': '–°–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', }

modules_training = {'w_t': ['–°–ª–æ–≤–æ - –ü–µ—Ä–µ–≤–æ–¥', '–ü–µ—Ä–µ–≤–æ–¥ - –°–ª–æ–≤–æ'],
                    'w_def': ['–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - –¢–µ—Ä–º–∏–Ω', '–¢–µ—Ä–º–∏–Ω - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'],
                    '3_w': ['–û–¥–Ω–æ —Å–ª–æ–≤–æ - –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–≤–∞'], '4_w': ['–û–¥–Ω–æ —Å–ª–æ–≤–æ - –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∏'],
                    'w_t_e': ['–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ'], }


def find_out(bot, update, user_data):
    print(user_data)


def main():
    token = '802480610:AAGWxK1UkY9p-WW99yr6Mu4mBypaGD-3rFM'
    updater = Updater(token)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler('start', start, pass_user_data=True, pass_args=True))
    dp.add_handler(CommandHandler('info', info, pass_user_data=True))
    dp.add_handler(CommandHandler('find_out', find_out, pass_user_data=True))
    dp.add_handler(CommandHandler('menu', back_to_menu))
    dp.add_handler(CommandHandler('add_module', start_adding, pass_user_data=True))
    dp.add_handler(CommandHandler('OK', trains.word_def_ok, pass_user_data=True))
    dp.add_handler(CallbackQueryHandler(inline_q_handler, pass_user_data=True))
    dp.add_handler(MessageHandler(Filters.text, message_updater, pass_user_data=True))
    dp.add_handler(MessageHandler(Filters.photo, image_updater, pass_user_data=True))

    updater.start_polling()

    updater.idle()


def image_updater(bot, update, user_data):
    try:
        data = update.message.photo
        if 'new_module' in user_data.keys() and user_data['new_module']['adding_sets']:
            new_set = tuple(update.message.caption.split('='))
            if (len(new_set) == 2 and (
                    user_data['new_module']['type'] == 'w_t' or user_data['new_module']['type'] == 'w_def')) or (
                    len(new_set) == 3 and (
                    user_data['new_module']['type'] == '3_w' or
                    user_data['new_module']['type'] == 'w_t_e')) or (
                    len(new_set) == 4 and user_data['new_module']['type'] == '4_w'):
                im_name = str(update.message.from_user.id) + str(update.message.message_id) + '.jpg'
                user_data['new_module']['sets'].append({'set': new_set, 'image': im_name})
                try:
                    ph = data[1].get_file().download(
                        custom_path='users_data/images/' + im_name)
                except Exception as ex:
                    print(ex)
                    update.message.reply_text('–ö–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏. –≠—Ç–∞ –ø–∞—Ä–∞ '
                                              '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–Ω–æ–≤—å, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥')
                    del user_data['new_module']['sets'][-1]
            else:
                update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ü—Ä–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')

        elif 'edit' in user_data.keys() and user_data['edit']['adding_pair']:
            user_data['last_message'] = None
            mod_type = db_work.ModulesDB.query.filter_by(module_id=user_data['edit']['adding_pair']).first().type
            new_set = tuple(update.message.caption.split('='))
            if (len(new_set) == 2 and (mod_type == 'w_t' or mod_type == 'w_def')) or (
                    len(new_set) == 3 and (mod_type == '3_w' or mod_type == 'w_t_e')) or (
                    len(new_set) == 4 and mod_type == '4_w'):
                im_name = str(update.message.from_user.id) + str(update.message.message_id) + '.jpg'
                try:
                    ph = data[1].get_file().download(
                        custom_path='users_data/images/' + im_name)
                except:
                    traceback.print_exc()
                    keyboard = InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='cancel_editing_module')]])
                    update.message.reply_text('–ö–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏. –≠—Ç–∞ –ø–∞—Ä–∞ '
                                              '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–Ω–æ–≤—å, –ª–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ '
                                              '–≤—ã–±–æ—Ä—É –ø–∞—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                                              reply_markup=keyboard)
                    return

                set_obj = db_work.WordsSets(module_id=user_data['edit']['adding_pair'],
                                            word1=new_set[0].strip(),
                                            word2=new_set[1].strip(),
                                            word3='' if len(new_set) < 3 else new_set[2].strip(),
                                            word4='' if len(new_set) < 4 else new_set[3].strip(),
                                            image=im_name)
                db_work.db.session.add(set_obj)
                db_work.db.session.commit()
                update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –ü–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.')
                modules_work_tools.choose_edit_set(bot, update, user_data, user_data['edit']['adding_pair'])

            else:
                update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ')
        elif 'edit' in user_data.keys() and user_data['edit']['edit_mod']['mod'] == 'image':
            editing_set = db_work.WordsSets.query.filter_by(set_id=user_data['edit']['edit_mod']['set_id']).first()
            im_name = str(update.message.from_user.id) + str(update.message.message_id) + '.jpg'
            try:
                ph = data[1].get_file().download(
                    custom_path='users_data/images/' + im_name)
            except Exception:
                traceback.print_exc()
                keyboard = InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='cancel_editing_module')]])
                update.message.reply_text('–ö–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏. –≠—Ç–∞ –ø–∞—Ä–∞ '
                                          '–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–Ω–æ–≤—å, –ª–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ '
                                          '–≤—ã–±–æ—Ä—É –ø–∞—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                                          reply_markup=keyboard)
                return
            if editing_set.image:
                os.remove('users_data/images/' + editing_set.image)
            db_work.db.session.delete(editing_set)
            new_set = db_work.WordsSets(module_id=editing_set.module_id,
                                        word1=editing_set.word1,
                                        word2=editing_set.word2,
                                        word3=editing_set.word3,
                                        word4=editing_set.word4,
                                        image=im_name)
            db_work.db.session.add(new_set)
            db_work.db.session.commit()
            update.message.reply_text('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
            mod_id = db_work.ModulesDB.query.filter_by(module_id=editing_set.module_id).first().module_id
            user_data['edit']['edit_mod']['mod'] = None
            user_data['edit']['edit_mod']['set_id'] = None

            modules_work_tools.choose_edit_set(bot, update, user_data, mod_id)

        else:
            try:
                data = update.message.photo
                ph = data[1].get_file().download(
                    custom_path='users_data/images/code.jpg')
                res = scan_barcode('users_data/images/code.jpg')
                print(res)
                module = db_work.ModulesDB.query.filter_by(module_id=int(res.split('=')[-1])).first()
                modules_work_tools.copy_module(bot, update, module)
                update.message.reply_text('–ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø—Ä–∏—Ä–æ–≤–∞–Ω! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É')
                if not res:
                    update.message.reply_text('–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É. –ù–æ –∑–∞—á–µ–º?ü§∑‚Äç‚ôÇÔ∏è')
            except Exception:
                traceback.print_exc()

    except Exception as ex:
        traceback.print_exc()
        update.message.reply_text('–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏. –ï—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–µ—Ç–µ '
                                  '–º–æ–¥—É–ª—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≥–∞–ª–æ—á–∫–æ–π, –∑–∞—Ç–µ–º '
                                  '–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞. –ú–æ–∂–µ—Ç–µ '
                                  '–ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤')


def message_updater(bot, update, user_data):
    try:
        text = update.message.text

        if text == 'üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥—É–ª—å':
            finish_adding(bot, update, user_data)

        elif text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†':
            message = '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è? –ú–æ–¥—É–ª—å –Ω–µ ' \
                      '–±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.'
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(text='–î–∞', callback_data='continue_add_mod|1')],
                                             [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',
                                                                   callback_data='continue_add_mod|')]])
            user_data['cancel_message'] = bot.send_message(update.effective_user.id, message, reply_markup=keyboard)

        elif text == '‚úñÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚úñÔ∏è':
            message = '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–æ—Å—Ä–æ—á–Ω–æ? –í—ã –ø–æ–≤—Ç–æ—Ä–∏–ª–∏ –µ—â–µ –Ω–µ –≤—Å–µ —Å–ª–æ–≤–∞.'
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(text='–î–∞', callback_data='continue_training_mod|1')],
                                             [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',
                                                                   callback_data='continue_training_mod|')]])
            user_data['cancel_message'] = bot.send_message(update.effective_user.id, message, reply_markup=keyboard)


        elif 'new_module' in user_data.keys() and user_data['new_module']['need_name']:
            if not db_work.ModulesDB.query.filter_by(name=text).all():
                user_data['new_module']['name'] = text
                user_data['new_module']['need_name'] = False
                ask_for_type(bot, update, user_data)
            else:
                update.message.reply_text('–¢–∞–∫–æ–π –º–æ–¥—É–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è')

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
        elif 'new_module' in user_data.keys() and user_data['new_module']['adding_sets']:
            new_set = tuple(update.message.text.split('='))
            if (len(new_set) == 2 and (
                    user_data['new_module']['type'] == 'w_t' or user_data['new_module']['type'] == 'w_def')) or (
                    len(new_set) == 3 and (
                    user_data['new_module']['type'] == '3_w' or user_data['new_module']['type'] == 'w_t_e')) or (
                    len(new_set) == 4 and user_data['new_module']['type'] == '4_w'):
                user_data['new_module']['sets'].append({'set': new_set, 'image': ''})
            else:
                update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        elif 'training' in user_data.keys() and 'is_training' in user_data['training'].keys() and \
                user_data['training']['is_training']:
            try:
                trains.check_answer(bot, update, user_data, text)
            except KeyError:
                update.message.reply_text('–ù–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å. –ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ–≤—Ç–æ—Ä–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ,'
                                          ' –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É OK')

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å
        elif 'edit' in user_data.keys() and user_data['edit']['adding_pair']:
            user_data['last_message'] = None
            mod_type = db_work.ModulesDB.query.filter_by(module_id=user_data['edit']['adding_pair']).first().type
            new_set = tuple(update.message.text.split('='))
            if (len(new_set) == 2 and (mod_type == 'w_t' or mod_type == 'w_def')) or (
                    len(new_set) == 3 and (mod_type == '3_w' or mod_type == 'w_t_e')) or (
                    len(new_set) == 4 and mod_type == '4_w'):
                set_obj = db_work.WordsSets(module_id=user_data['edit']['adding_pair'],
                                            word1=new_set[0].strip(),
                                            word2=new_set[1].strip(),
                                            word3='' if len(new_set) < 3 else new_set[2].strip(),
                                            word4='' if len(new_set) < 4 else new_set[3].strip(),
                                            image='')
                db_work.db.session.add(set_obj)
                db_work.db.session.commit()
                update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –ü–∞—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.')
                modules_work_tools.choose_edit_set(bot, update, user_data, user_data['edit']['adding_pair'])
                user_data['edit']['adding_pair'] = False
            else:
                keyboard = InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='cancel_editing_module')]])
                update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –≤–Ω–æ–≤—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                          reply_markup=keyboard)

        elif 'edit' in user_data.keys() and user_data['edit']['edit_mod']['mod'] == 'words':
            set = db_work.WordsSets.query.filter_by(set_id=user_data['edit']['edit_mod']['set_id']).first()
            db_work.db.session.delete(set)
            new_words = tuple(update.message.text.split('='))
            mod_type = db_work.ModulesDB.query.filter_by(module_id=set.module_id).first().type
            if (len(new_words) == 2 and (mod_type == 'w_t' or mod_type == 'w_def')) or (
                    len(new_words) == 3 and (mod_type == '3_w' or mod_type == 'w_t_e')) or (
                    len(new_words) == 4 and mod_type == '4_w'):
                new_set = db_work.WordsSets(module_id=set.module_id,
                                            word1=new_words[0],
                                            word2=new_words[1],
                                            word3='' if len(new_words) < 3 else new_words[2].strip(),
                                            word4='' if len(new_words) < 4 else new_words[3].strip(),
                                            image=set.image)
                db_work.db.session.add(new_set)
                db_work.db.session.commit()
                mod_id = db_work.ModulesDB.query.filter_by(module_id=set.module_id).first().module_id
                update.message.reply_text('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!')
                user_data['edit']['edit_mod']['mod'] = None
                user_data['edit']['edit_mod']['set_id'] = None
                modules_work_tools.choose_edit_set(bot, update, user_data, mod_id)
            else:
                keyboard = InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='cancel_editing_module')]])
                update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –≤–Ω–æ–≤—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                          reply_markup=keyboard)

        else:
            update.message.reply_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é')
    except:
        traceback.print_exc()


def finish_adding(bot, update, user_data):
    try:
        if 'new_module' in user_data.keys() and user_data['new_module']['process']:
            if user_data['new_module']['sets']:
                module = db_work.ModulesDB(user_id=update.effective_user.id,
                                           name=user_data['new_module']['name'],
                                           type=user_data['new_module']['type'],
                                           lang=user_data['new_module']['language'])
                db_work.db.session.add(module)
                db_work.db.session.commit()
                module_id = db_work.ModulesDB.query.filter_by(name=user_data['new_module']['name']).first().module_id
                for s in user_data['new_module']['sets']:
                    new_set = db_work.WordsSets(module_id=module_id,
                                                word1=s['set'][0].strip(),
                                                word2=s['set'][1].strip(),
                                                word3='' if len(s['set']) < 3 else s['set'][2].strip(),
                                                word4='' if len(s['set']) < 4 else s['set'][3].strip(),
                                                image=s['image'])
                    db_work.db.session.add(new_set)
                db_work.db.session.commit()
                update.message.reply_text('–ú–æ–¥—É–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
                user_data['new_module']['adding_sets'] = False
            else:
                update.message.reply_text('–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω—É –ø–∞—Ä—É. –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
                user_data['new_module']['adding_sets'] = False
            back_to_menu(bot, update, user_data)
        else:
            update.message.reply_text('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è')
    except Exception:
        traceback.print_exc()


def info(bot, update, user_data):
    try:
        text = open('texts/info.txt', mode='r', encoding='utf8').read()
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(text='–°–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥', callback_data='w_t_info')],
                                         [InlineKeyboardButton(text='–°–ª–æ–≤–æ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', callback_data='w_def_info')],
                                         [InlineKeyboardButton(text='3/4 —Å–ª–æ–≤–∞', callback_data='w34_info')],
                                         [InlineKeyboardButton(text='–°–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥ - –ø—Ä–∏–º–µ—Ä',
                                                               callback_data='w_t_e_info')],
                                         [InlineKeyboardButton(text='–†–∞–±–æ—Ç–∞ —Å –º–æ–¥—É–ª—è–º–∏', callback_data='add_info')],
                                         [InlineKeyboardButton(text='–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', callback_data='train_info')],
                                         [InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')]
                                         ])
        if not user_data['last_message']:
            user_data['last_message'] = bot.send_message(update.effective_user.id, text, reply_markup=keyboard)
        else:
            bot.edit_message_text(text, update.effective_user.id, user_data['last_message'].message_id,
                                  reply_markup=keyboard)
        return text
    except Exception:
        traceback.print_exc()


def back_to_menu(bot, update, user_data):
    text = '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é'
    button1 = InlineKeyboardButton(text='‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='main_info')
    button2 = InlineKeyboardButton(text='üìã–†–∞–±–æ—Ç–∞ —Å –º–æ–¥—É–ª—è–º–∏', callback_data='modules_work')
    button3 = InlineKeyboardButton(text='‚úèÔ∏è–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—èÔ∏è', callback_data='train')
    keyboard = InlineKeyboardMarkup([[button1],
                                     [button2],
                                     [button3]])
    if user_data['last_message']:
        bot.edit_message_text(text, update.effective_user.id,
                              user_data['last_message'].message_id,
                              reply_markup=keyboard)
    else:
        user_data['last_message'] = bot.send_message(update.effective_user.id, text, reply_markup=keyboard)


def start(bot, update, user_data, args):
    text = '–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç Word for World. ' \
           '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã—É—á–∏—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ç–µ—Ä–º–∏–Ω—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. ' \
           '\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ú–æ–¥—É–ª–∏ - –ø–æ—Ä—Ü–∏–∏ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å. ' \
           '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–†–∞–±–æ—Ç–∞ —Å –º–æ–¥—É–ª—è–º–∏"\n' \
           '–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ—à–ª–∏ —Å—é–¥–∞ —Å –ø–æ–º–æ—â—å—é qr-–∫–æ–¥–∞, –∏ –µ—Å–ª–∏ —Å –≤–∞–º–∏ –∫—Ç–æ-—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è –º–æ–¥—É–ª–µ–º, ' \
           '–ø—Ä–∏—â–ª–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑. –ò –≤–æ–æ–±—â–µ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–º' \
           '—Å –≤–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –ú–æ–¥—É–ª—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤–∞–º,' \
           '–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–∞–ª—å—à–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É.\n' \
           '–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:\n'
    text += open('texts/start.txt', mode='r', encoding='utf8').read()
    user_data.clear()

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(text='‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='main_info')],
                                     [InlineKeyboardButton(text='üìã–†–∞–±–æ—Ç–∞ —Å –º–æ–¥—É–ª—è–º–∏', callback_data='modules_work')],
                                     [InlineKeyboardButton(text='‚úèÔ∏è–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='train')]])
    update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    user_data['last_message'] = update.message.reply_text('–ú–µ–Ω—é', reply_markup=keyboard)
    try:
        if args:
            module = db_work.ModulesDB.query.filter_by(module_id=int(args[0])).first()
            if module:
                modules_work_tools.copy_module(bot, update, module)
                update.message.reply_text('–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –ø–æ–º–æ—à—å—é —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è '
                                          '–º–æ–¥—É–ª—è. –ú–æ–¥—É–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à—É –ø–∞–ø–∫—É.')
            else:
                update.message.reply_text('–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –ø–æ–º–æ—à—å—é —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è '
                                          '–º–æ–¥—É–ª—è. –ù–æ –≤–∏–¥–∏–º–æ –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –±—ã–ª —É–¥–∞–ª–µ–Ω. '
                                          '–ù–∞–º –ø—Ä–∞–≤–¥–∞ –∂–∞–ª—å.')
    except:
        traceback.print_exc()
        update.message.reply_text('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')


def inline_q_handler(bot, update, user_data):
    def nothing():
        pass

    def main_info():
        info(bot, update, user_data)

    def modules_work(*args):
        modules_work_menu(bot, update, user_data)

    def add_mod(*args):
        start_adding(bot, update, user_data)

    def continue_add_mod(*args):
        if args[0]:
            if user_data['last_message']:
                bot.delete_message(update.effective_user.id, user_data['last_message'].message_id)
            bot.delete_message(update.effective_user.id, user_data['cancel_message'].message_id)
            bot.send_message(update.effective_user.id, '–ú–æ–¥—É–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
            user_data['last_message'] = None
            back_to_menu(bot, update, user_data)
        else:
            keyboard = ReplyKeyboardMarkup([['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†']], one_time_keyboard=True)
            bot.delete_message(update.effective_user.id, user_data['cancel_message'].message_id)
            bot.send_message(update.effective_user.id, '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–∫–æ–Ω—á–∏–ª–∏',
                             reply_markup=keyboard)

    def edit_mod(*args):
        modules_work_tools.start_edit_mod(bot, update, user_data)

    def choose_edit_set(*args):
        modules_work_tools.choose_edit_set(bot, update, user_data, args[0])

    def choose_edit_action(*args):
        modules_work_tools.choose_edit_action(bot, update, user_data, args[0])

    def edit_action(*args):
        if args[0] == 'words':
            modules_work_tools.edit_words(bot, update, user_data, int(args[1]))
        elif args[0] == 'image':
            modules_work_tools.edit_image(bot, update, user_data, int(args[1]))
        elif args[0] == 'ask_del':
            modules_work_tools.delete_set(bot, update, user_data, int(args[1]), False)
        elif args[0] == 'del':
            modules_work_tools.delete_set(bot, update, user_data, int(args[1]), True)

    def add_pair(*args):
        modules_work_tools.add_pair(bot, update, user_data, int(args[0]))

    def del_mod(*args):
        modules_work_tools.start_del_mod(bot, update, user_data)

    def delete_module(*args):
        modules_work_tools.delete_module(bot, update, user_data, int(args[0]), False if len(args) == 1 else True)

    def share_mod(*args):
        modules_work_tools.start_share_mod(bot, update, user_data)

    def share_module(*args):
        modules_work_tools.share_module(bot, update, user_data, args[0])

    def train(*args):
        if args:
            trains.choose_module(bot, update, user_data, True)
        else:
            trains.choose_module(bot, update, user_data, False)

    def continue_training_mod(*args):
        if args[0]:
            if user_data['last_message']:
                bot.delete_message(update.effective_user.id, user_data['last_message'].message_id)
            bot.delete_message(update.effective_user.id, user_data['cancel_message'].message_id)
            bot.send_message(update.effective_user.id, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞')
            user_data['training']['is_training'] = False
            user_data['last_message'] = None
            back_to_menu(bot, update, user_data)
        else:
            keyboard = ReplyKeyboardMarkup([['‚úñÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚úñÔ∏è']], one_time_keyboard=True)
            bot.delete_message(update.effective_user.id, user_data['cancel_message'].message_id)
            bot.send_message(update.effective_user.id, '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–∫–æ–Ω—á–∏–ª–∏',
                             reply_markup=keyboard)

    def back_to_main(*args):
        back_to_menu(bot, update, user_data)

    def w_t_info(*args):
        infoDetails.w_t_info(bot, update, user_data)

    def w_def_info(*args):
        infoDetails.w_def_info(bot, update, user_data)

    def w34_info(*args):
        infoDetails.w34_info(bot, update, user_data)

    def w_t_e_info(*args):
        infoDetails.w_t_e_info(bot, update, user_data)

    def add_info(*args):
        infoDetails.add_info(bot, update, user_data)

    def train_info(*args):
        infoDetails.train_info(bot, update, user_data)

    def edit_info(*args):
        infoDetails.edit_info(bot, update, user_data)

    def cancel_adding_module(*args):
        user_data['edit']['adding_pair'] = False
        modules_work_tools.choose_edit_set(bot, update, user_data, user_data['edit']['adding_pair'])

    def set_type(*args):
        try:
            user_data['new_module']['type'] = args[0]
            user_data['last_message'] = None
            bot.delete_message(chat_id=update.callback_query.from_user.id,
                               message_id=update.callback_query.message.message_id)
            bot.send_message(chat_id=update.callback_query.from_user.id,
                             text='–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø {}'.format(modules_type_codes[args[0]].lower()))
            if user_data['new_module']['type'] != 'w_def':
                ask_for_language(bot, update, user_data)
            else:
                start_add_sets(bot, update, user_data)
        except:
            traceback.print_exc()

    def set_lang(*args):
        user_data['new_module']['language'] = args[0]
        start_add_sets(bot, update, user_data)

    def set_active_module(*args):
        bot.delete_message(chat_id=update.effective_user.id,
                           message_id=user_data['training']['choose_module_btns'].message_id)
        if user_data['training']['inbuilt']:
            user_data['training']['active_module'] = db_work.InbuiltModule.query.filter_by(
                module_id=int(args[0])).first()
        else:
            user_data['training']['active_module'] = db_work.ModulesDB.query.filter_by(module_id=int(args[0])).first()
        keyboard = ReplyKeyboardMarkup([['‚úñÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚úñÔ∏è']], one_time_keyboard=True)
        bot.send_message(chat_id=update.effective_user.id,
                         text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥—É–ª—å ' + user_data['training']['active_module'].name,
                         reply_markup=keyboard)
        keyboard = [[InlineKeyboardButton(text=i, callback_data='to_train|' + i)] for i in
                    modules_training[user_data['training']['active_module'].type]]
        keyboard = InlineKeyboardMarkup(keyboard)
        user_data['last_message'] = bot.send_message(chat_id=update.effective_user.id,
                                                     text='–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
                                                     reply_markup=keyboard)

    def page_forward(*args):
        keyboard = []
        if user_data['training']['inbuilt']:
            keyboard.append([InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–æ–¥—É–ª—è–º', callback_data='train|1')])
        if len(user_data['training']['modules']) - int(args[0]) <= 10:
            for i in user_data['training']['modules'][int(args[0]):]:
                button = [InlineKeyboardButton(text=i.name, callback_data='set_active_module|' + str(i.module_id))]
                keyboard.append(button)
            button = [InlineKeyboardButton(text='<-', callback_data='page_back|' + args[0])]
            keyboard.append(button)
        else:
            for i in user_data['training']['modules'][int(args[0]):int(args[0]) + 10]:
                button = [InlineKeyboardButton(text=i.name, callback_data='set_active_module|' + str(i.module_id))]
                keyboard.append(button)
            button = [InlineKeyboardButton(text='<-', callback_data='page_back|' + args[0]),
                      InlineKeyboardButton(text='->', callback_data='page_forward|' + str(int(args[0]) + 10))]
            keyboard.append(button)
        if not user_data['training']['inbuilt']:
            keyboard.append([InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')])
        else:
            keyboard.append([InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –≤–∞—à–∏–º –º–æ–¥—É–ª—è–º', callback_data='train')])
        keyboard = InlineKeyboardMarkup(keyboard)
        bot.edit_message_reply_markup(chat_id=update.effective_user.id,
                                      message_id=user_data['last_message'].message_id,
                                      reply_markup=keyboard)

    def page_back(*args):
        keyboard = []
        if user_data['training']['inbuilt']:
            keyboard.append([InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–æ–¥—É–ª—è–º', callback_data='train|1')])
        for i in user_data['training']['modules'][int(args[0]) - 10:int(args[0])]:
            button = [InlineKeyboardButton(text=i.name, callback_data='set_active_module|' + str(i.module_id))]
            keyboard.append(button)
        button = []
        if int(args[0]) != 10:
            button = [InlineKeyboardButton(text='<-', callback_data='page_back|' + str(int(args[0]) - 10))]
        button.append(InlineKeyboardButton(text='->', callback_data='page_forward|' + args[0]))
        keyboard.append(button)
        if not user_data['training']['inbuilt']:
            keyboard.append([InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')])
        else:
            keyboard.append([InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –≤–∞—à–∏–º –º–æ–¥—É–ª—è–º', callback_data='train')])
        keyboard = InlineKeyboardMarkup(keyboard)
        bot.edit_message_reply_markup(chat_id=update.effective_user.id,
                                      message_id=user_data['last_message'].message_id,
                                      reply_markup=keyboard)

    def edit_mod_page_forward(*args):
        modules_work_tools.edit_mod_page_forward(bot, update, user_data, args[0], int(args[1]),
                                                 None if args[0] != 'sets' else args[2])

    def edit_mod_page_back(*args):
        modules_work_tools.edit_mod_page_back(bot, update, user_data, args[0], int(args[1]),
                                              None if args[0] != 'sets' else args[2])

    def to_train(*args):
        trains.start(bot, update, user_data, *args)

    method, *payload = update.callback_query.data.split('|')
    try:
        text = locals().get(method, lambda d: None)(*payload)
        bot.answer_callback_query(update.callback_query.id, text=text)
    except Exception:
        traceback.print_exc()


def start_adding(bot, update, user_data):
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è'
    user_id = update.effective_user.id
    keyboard = ReplyKeyboardMarkup([['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†']], one_time_keyboard=True)
    bot.delete_message(update.effective_user.id, user_data['last_message'].message_id)
    bot.send_message(user_id, text, reply_markup=keyboard)
    user_data['last_message'] = None
    user_data['new_module'] = {}
    user_data['new_module']['process'] = True
    user_data['new_module']['need_name'] = True


def modules_work_menu(bot, update, user_data):
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥—É–ª—å', callback_data='add_mod')],
                                     [InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å', callback_data='edit_mod')],
                                     [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å', callback_data='del_mod')],
                                     [InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–¥—É–ª–µ–º', callback_data='share_mod')],
                                     [InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')]
                                     ])
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    if user_data['last_message']:
        user_data['last_message'] = bot.edit_message_text(text, update.effective_user.id,
                                                          user_data['last_message'].message_id,
                                                          reply_markup=keyboard)
    else:
        user_data['last_message'] = bot.send_message(update.effective_user.id, text, reply_markup=keyboard)


def ask_for_type(bot, update, user_data):
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(text='–°–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥', callback_data='set_type|w_t')],
                                     [InlineKeyboardButton(text='–°–ª–æ–≤–æ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', callback_data='set_type|w_def')],
                                     [InlineKeyboardButton(text='3 —Å–ª–æ–≤–∞', callback_data='set_type|3_w')],
                                     [InlineKeyboardButton(text='4 —Å–ª–æ–≤–∞', callback_data='set_type|4_w')],
                                     [InlineKeyboardButton(text='–°–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥ - –ø—Ä–∏–º–µ—Ä',
                                                           callback_data='set_type|w_t_e')]
                                     ])

    try:
        user_data['last_message'] = bot.send_message(update.effective_user.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –º–æ–¥—É–ª—è',
                                                     reply_markup=keyboard)
    except Exception as ex:
        traceback.print_exc()


def ask_for_language(bot, update, user_data):
    keyboard = [[InlineKeyboardButton(text='–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', callback_data='set_lang|en-US')],
                [InlineKeyboardButton(text='–¢—É—Ä–µ—Ü–∫–∏–π', callback_data='set_lang|tr-TR')],
                [InlineKeyboardButton(text='–†—É—Å—Å–∫–∏–π', callback_data='set_lang|ru-RU')],
                [InlineKeyboardButton(text='–î—Ä—É–≥–æ–π', callback_data='set_lang|')]
                ]
    keyboard = InlineKeyboardMarkup(keyboard)
    user_data['last_message'] = bot.send_message(update.effective_user.id,
                                                 '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ü–ï–†–í–û–ì–û —Å–ª–æ–≤–∞ (—Å–ª–æ–≤) –≤ –º–æ–¥—É–ª–µ. –≠—Ç–æ '
                                                 '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è —Å–ª–æ–≤.',
                                                 reply_markup=keyboard)


def start_add_sets(bot, update, user_data):
    if user_data['last_message']:
        bot.delete_message(chat_id=update.effective_user.id,
                           message_id=user_data['last_message'].message_id)
        user_data['last_message'] = None
    reply_keyboard = [['üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥—É–ª—å'],
                      ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    bot.send_message(chat_id=update.callback_query.from_user.id,
                     text='–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä—ã (—Ç—Ä–æ–π–∫–∏/—á–µ—Ç–≤–µ—Ä–∫–∏) —Å–ª–æ–≤ '
                          '–∏–ª–∏ —Å–ª–æ–≤–æ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–æ–º "=" –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞–ø—Ä–∏–º–µ—Ä '
                          '"hello=–ø—Ä–∏–≤–µ—Ç" (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥—É–ª—è) –∫–∞–∂–¥–æ–µ –û–¢–î–ï–õ–¨–ù–´–ú –°–û–û–ë–©–ï–ù–ò–ï–ú. '
                          '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ –º–æ–¥—É–ª—é, '
                          '–ø—Ä–∏—à–ª–∏—Ç–µ –µ–µ –∏ —Ç–µ–∫—Å—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–ø–∏—Å–∏ (–ß—Ç–±—ã —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –°–ù–ê–ß–ê–õ–ê '
                          '–≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–ø–∏—Å–∏ '
                          '–≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞). \n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥—É–ª—å" '
                          '(–ï—Å–ª–∏ –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ '
                          '‚öÉ —Ä—è–¥–æ–º —Å–æ –∑–Ω–∞—á–∫–æ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞)',
                     reply_markup=markup)
    user_data['new_module']['adding_sets'] = True
    user_data['new_module']['sets'] = []


if __name__ == '__main__':
    main()
